// <auto-generated />
using System;
using Lab6.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lab6.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241122200526_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Lab6.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("TEXT");

                    b.Property<string>("Line2")
                        .HasMaxLength(90)
                        .HasColumnType("TEXT");

                    b.Property<string>("Line3")
                        .HasMaxLength(90)
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherAddressDetails")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("StateProvinceCounty")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipPostcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Lab6.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerEmail")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherCustomerDetails")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Lab6.Models.CustomerAddress", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressTypeCode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerId", "AddressId", "DateFrom");

                    b.HasIndex("AddressId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("Lab6.Models.CustomerOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerPaymentMethodId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOrderPaid")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOrderPlaced")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderStatusCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OrderTotalPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherOrderDetails")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerPaymentMethodId");

                    b.ToTable("CustomerOrders");
                });

            modelBuilder.Entity("Lab6.Models.CustomerOrdersDelivery", b =>
                {
                    b.Property<DateTime>("DateReported")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryStatusCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DateReported");

                    b.HasIndex("OrderId");

                    b.ToTable("CustomerOrdersDeliveries");
                });

            modelBuilder.Entity("Lab6.Models.CustomerOrdersProducts", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CustomerOrdersProducts");
                });

            modelBuilder.Entity("Lab6.Models.CustomerPaymentMethod", b =>
                {
                    b.Property<int>("CustomerPaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherDetails")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethodCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerPaymentMethodId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPaymentMethods");
                });

            modelBuilder.Entity("Lab6.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BookAuthor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("BookIsbn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BookPublicationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<bool>("FoodContainsYn")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FoodDescription")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("FoodFlavor")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FoodIngredients")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FoodName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherProductDetails")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentProductId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductTypeCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierCode")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductId");

                    b.HasIndex("ParentProductId");

                    b.HasIndex("SupplierCode");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Lab6.Models.ProductPrice", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductId", "DateFrom");

                    b.ToTable("ProductPrices");
                });

            modelBuilder.Entity("Lab6.Models.Supplier", b =>
                {
                    b.Property<string>("SupplierCode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherSupplierDetails")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("SupplierCode");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Lab6.Models.CustomerAddress", b =>
                {
                    b.HasOne("Lab6.Models.Address", "Address")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Lab6.Models.CustomerOrder", b =>
                {
                    b.HasOne("Lab6.Models.Customer", "Customer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Lab6.Models.CustomerPaymentMethod", "CustomerPaymentMethod")
                        .WithMany("CustomerOrder")
                        .HasForeignKey("CustomerPaymentMethodId");

                    b.Navigation("Customer");

                    b.Navigation("CustomerPaymentMethod");
                });

            modelBuilder.Entity("Lab6.Models.CustomerOrdersDelivery", b =>
                {
                    b.HasOne("Lab6.Models.CustomerOrder", "CustomerOrder")
                        .WithMany("CustomerOrdersDeliveries")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerOrder");
                });

            modelBuilder.Entity("Lab6.Models.CustomerOrdersProducts", b =>
                {
                    b.HasOne("Lab6.Models.CustomerOrder", "CustomerOrder")
                        .WithMany("CustomerOrdersProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.Product", "Product")
                        .WithMany("CustomerOrdersProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerOrder");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Lab6.Models.CustomerPaymentMethod", b =>
                {
                    b.HasOne("Lab6.Models.Customer", "Customer")
                        .WithMany("CustomerPaymentMethods")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Lab6.Models.Product", b =>
                {
                    b.HasOne("Lab6.Models.Product", "ParentProduct")
                        .WithMany()
                        .HasForeignKey("ParentProductId");

                    b.HasOne("Lab6.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierCode");

                    b.Navigation("ParentProduct");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Lab6.Models.ProductPrice", b =>
                {
                    b.HasOne("Lab6.Models.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Lab6.Models.Address", b =>
                {
                    b.Navigation("CustomerAddresses");
                });

            modelBuilder.Entity("Lab6.Models.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerOrders");

                    b.Navigation("CustomerPaymentMethods");
                });

            modelBuilder.Entity("Lab6.Models.CustomerOrder", b =>
                {
                    b.Navigation("CustomerOrdersDeliveries");

                    b.Navigation("CustomerOrdersProducts");
                });

            modelBuilder.Entity("Lab6.Models.CustomerPaymentMethod", b =>
                {
                    b.Navigation("CustomerOrder");
                });

            modelBuilder.Entity("Lab6.Models.Product", b =>
                {
                    b.Navigation("CustomerOrdersProducts");

                    b.Navigation("ProductPrices");
                });

            modelBuilder.Entity("Lab6.Models.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
